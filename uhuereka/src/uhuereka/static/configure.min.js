const SECURITY={0:"open",1:"WEP",2:"WPA-PSK",3:"WPA2-PSK",4:"WPA/WPA2-PSK"};const FORM=document.getElementById("form");const TABLE=document.getElementById("networks");const REFRESH=document.getElementById("refresh");const SUBMIT=document.getElementById("submit");const STATUS=document.getElementById("status");function getRow(e){const t=document.createElement("td");const n=document.createElement("input");n.type="radio";n.name="ssid";n.value=e["ssid"];n.required=true;t.replaceChildren(n,document.createTextNode(e["ssid"]));const o=document.createElement("td");o.appendChild(document.createTextNode((100+e["strength"]).toString()));const s=document.createElement("td");s.appendChild(document.createTextNode(SECURITY[e["security"]]||`Unknown (${e["security"]})`));const a=document.createElement("tr");a.replaceChildren(t,o,s);return a}function showStatusMessage(e){STATUS.replaceChildren(document.createTextNode(e))}function showTableMessage(e){const t=document.createElement("td");t.appendChild(document.createTextNode(e));const n=document.createElement("tr");n.replaceChildren(document.createElement("td"),t,document.createElement("td"));TABLE.replaceChildren(n)}function load(){REFRESH.disabled=true;SUBMIT.disabled=true;showTableMessage("Loading...");fetch(`${window.location.origin}/networks`).then(e=>{if(!e.ok){throw new Error("Unexpected response while requesting networks.")}return e.json()}).then(e=>{if(!e||!e.length){showTableMessage("No networks found.")}else{const t=[];for(const n of e){if(!n["ssid"]){continue}t.push(getRow(n))}TABLE.replaceChildren(...t)}REFRESH.disabled=false;SUBMIT.disabled=false}).catch(e=>{showTableMessage("Failed to load. Press 'Refresh' to try again.");console.error(e);showStatusMessage(e.toString());REFRESH.disabled=false;SUBMIT.disabled=false})}FORM.addEventListener("submit",e=>{e.preventDefault();REFRESH.disabled=true;SUBMIT.disabled=true;showStatusMessage("Connecting...");fetch(e.target.action,{method:"POST",body:new URLSearchParams(new FormData(e.target))}).then(e=>{if(!e.ok){throw new Error(`HTTP error! Status: ${e.status}`)}return e.json()}).then(e=>{const t=e["error"];if(t){showStatusMessage(`Failed to connect: ${t}`);REFRESH.disabled=false;SUBMIT.disabled=false}else{showStatusMessage(`Successfully connected to ${e["ssid"]} as ${e["hostname"]} on ${e["ifconfig"][0]}. `+"No further configuration allowed through this portal. You may close this page. "+"To reconfigure, connect to the device on the new network.")}}).catch(e=>{showStatusMessage("Failed to connect: "+e.toString());REFRESH.disabled=false;SUBMIT.disabled=false})});load();